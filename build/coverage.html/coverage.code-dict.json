{"/home/travis/build/npmtest/node-npmtest-ember-websockets/test.js":"/* istanbul instrument in package npmtest_ember_websockets */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-websockets/lib.npmtest_ember_websockets.js":"/* istanbul instrument in package npmtest_ember_websockets */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_websockets = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_websockets = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-websockets/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-websockets && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_websockets */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_websockets\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_websockets.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_websockets.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_websockets.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_websockets.__dirname + '/lib.npmtest_ember_websockets.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-websockets/node_modules/ember-websockets/index.js":"/* eslint-env node */\n'use strict';\n\nconst path = require('path');\nconst exists = require('exists-sync');\nconst Funnel = require('broccoli-funnel');\nconst Merge = require('broccoli-merge-trees');\n\nmodule.exports = {\n  name: 'ember-websockets',\n\n  included() {\n    this._super.included.apply(this, arguments);\n    this._shimImport();\n\n    if (!this._isFastbootBuild()) {\n      this.import(`vendor/${this.name}/urijs/URI.min.js`);\n\n      if (this._readConfigProp('socketIO') === true) {\n        this.import(`vendor/${this.name}/socket.io-client/socket.io.min.js`);\n      }\n    }\n  },\n\n  treeForVendor() {\n    const urijsPath = require.resolve('urijs');\n    const mockSocketPath = require.resolve('mock-socket');\n    const socketIOClientPath = require.resolve('socket.io-client');\n\n    return new Merge([\n      new Funnel(__dirname + '/vendor', { destDir: this.name }),\n      new Funnel(path.dirname(urijsPath), { destDir: this.name + '/urijs' }),\n      new Funnel(path.dirname(mockSocketPath), { destDir: this.name + '/mock-socket' }),\n      new Funnel(path.join(path.dirname(socketIOClientPath), '../dist'), { destDir: this.name + '/socket.io-client' })\n    ]);\n  },\n\n  // https://github.com/ember-intl/ember-intl/blob/dd2a90b2ccf94000a92394565d048c42089aef9b/index.js#L144-L161\n  _readConfig(environment) {\n    const project = this.app.project;\n\n    // NOTE: For ember-cli >= 2.6.0-beta.3, project.configPath() returns absolute path\n    // while older ember-cli versions return path relative to project root\n    const configPath = path.dirname(project.configPath());\n    let config = path.join(configPath, 'environment.js');\n\n    if (!path.isAbsolute(config)) {\n      config = path.join(project.root, config);\n    }\n\n    if (exists(config)) {\n      return require(config)(environment);\n    }\n\n    return {\n      'ember-websockets': {}\n    };\n  },\n\n  _readConfigProp(prop) {\n    this._shimImport();\n    const config = this._readConfig(this._findHost().env);\n\n    if (config['ember-websockets'] && config['ember-websockets'][prop]) {\n      return config['ember-websockets'][prop];\n    }\n  },\n\n  _isFastbootBuild() {\n    return !!process.env.EMBER_CLI_FASTBOOT;\n  },\n\n  // https://github.com/simplabs/ember-simple-auth/blob/1ca4ae678b7be9905076762220dcd9fcb0f27ac0/index.js#L24-L39\n  _shimImport() {\n    if (!this.import) {\n      this._findHost = function findHostShim() {\n        let current = this;\n        let app;\n        do {\n          app = current.app || app;\n        } while (current.parent.parent && (current = current.parent));\n        return app;\n      };\n      this.import = function importShim(asset, options) {\n        const app = this._findHost();\n        app.import(asset, options);\n      };\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-websockets/node_modules/ember-websockets/addon/helpers.js":"/*\n* The native websocket object will transform urls without a pathname to have just a /.\n* As an example: ws://localhost:8080 would actually be ws://localhost:8080/ but ws://example.com/foo would not\n* change. This function does this transformation to stay inline with the native websocket implementation.\n*/\nexport function normalizeURL(url) {\n  const parsedUrl = new URI(url);\n  const path = parsedUrl.path();\n  const query = parsedUrl.query();\n\n  if (path === '/') {\n    if(query === '' && url.slice(-1) !== '/') {\n      return url + '/';\n    }\n\n    if(query !== '' && url.indexOf('/?') === -1) {\n      return url.replace('?', '/?');\n    }\n  }\n\n  return url;\n}\n\n/*\n* Since the url will be used as a key will need to make sure that it does not\n* contain '.' as it will throw ember off\n*/\nexport function cleanURL(url) {\n  return url.replace(/\\./g, '');\n}\n","/home/travis/build/npmtest/node-npmtest-ember-websockets/node_modules/ember-websockets/config/environment.js":"/* eslint-env node */\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return {\n    'ember-websockets': {\n      'socketIO': false\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-websockets/node_modules/ember-websockets/addon/helpers/socketio-proxy.js":"import Ember from 'ember';\n\nconst { bind } = Ember.run;\nconst { assert, ObjectProxy } = Ember;\n\nexport default ObjectProxy.extend({\n\n  /*\n  * {\n  *    url: 'String'\n  *    type: 'String'\n  *    callback: The function to envoke\n  *    context: The context of the function\n  *    ref: The actual callback function with is given to socketio\n  * }\n  */\n  listeners: null,\n\n  init() {\n    this._super(...arguments);\n    this.listeners = [];\n  },\n\n  /*\n  * This method simply passes the arguments to the socketio on method except it binds the callback function to\n  * the run loop.\n  */\n  on(type, callback, context) {\n    assert('The second argument must be a function.', typeof(callback) === 'function');\n\n    const bindedCallback = bind(context, callback);\n    this.listeners.push({url: this.socket.io.uri, type, callback, context, ref: bindedCallback});\n    this.socket.on(type, bindedCallback);\n  },\n\n  off(type, callback) {\n    assert('The second argument must be a function.', typeof(callback) === 'function');\n    const listeners = this.listeners.filter(listener => listener.callback === callback && listener.url === this.socket.io.uri && listener.type === type);\n\n    if (listeners) {\n      listeners.forEach(item => this.socket.off(type, item.ref));\n    }\n\n    this.listeners = this.listeners.filter(l => listeners.indexOf(l) === -1);\n  },\n\n  /*\n  * This method passes the argument to the socketio emit method.\n  */\n  emit() {\n    this.socket.emit.apply(this.socket, arguments);\n  },\n\n  close() {\n    this.listeners = this.listeners.filter(listener => listener.url === this.socket.io.uri);\n    this.socket.close.apply(this.socket, arguments);\n  },\n\n  send() { this.socket.send.apply(this.socket, arguments); },\n  connect() { this.socket.connect.apply(this.socket, arguments); }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-websockets/node_modules/ember-websockets/addon/helpers/websocket-proxy.js":"import Ember from 'ember';\n\nconst events  = ['close', 'error', 'message', 'open'];\nconst { filter, indexOf, forEach } = Array.prototype;\nconst { assert } = Ember;\n\nexport default Ember.ObjectProxy.extend({\n\n  /*\n  * {\n  *    url: 'String'\n  *    type: 'String' (such as 'open', 'message', 'close', and 'error')\n  *    callback: The function to envoke\n  *    context: The context of the function\n  * }\n  */\n  listeners: null,\n\n  protocols: null,\n\n  init() {\n    this._super(...arguments);\n    this.listeners = [];\n    this.setupInternalListeners();\n  },\n\n  /*\n  * Adds a callback function into the listeners array which will\n  * be invoked later whenever a given `type` event happens.\n  *\n  * type: must be either 'open', 'message', 'close', 'error'\n  */\n  on(type, callback, context) {\n    assert(`${type} is not a recognized event name. Please use on of the following: ${events.join(', ')}`, indexOf.call(events, type) !== -1);\n    assert('The second argument must be a function.', typeof callback === 'function');\n\n    this.listeners.push({ url: this.socket.url, type, callback, context });\n  },\n\n  /*\n  * Removes a callback function from the listeners array. This callback\n  * will not longer be invoked when the given `type` event happens.\n  */\n  off(type, callback) {\n    this.listeners = filter.call(this.listeners, listeners => !(listeners.callback === callback && listeners.type === type));\n  },\n\n  /*\n  * Message is the message which will be passed into the native websockets send method\n  * and shouldStringify is a boolean which determines if we should call JSON.stringify on\n  * the message.\n  */\n  send(message, shouldStringify = false) {\n    if(shouldStringify && JSON && JSON.stringify) {\n      message = JSON.stringify(message);\n    }\n\n    assert('Cannot send message to the websocket while it is not open.', this.readyState() === WebSocket.OPEN);\n\n    this.socket.send(message);\n  },\n\n  close() {\n    this.socket.close();\n  },\n\n  reconnect() {\n    this.set('socket', new WebSocket(this.socket.url, this.get('protocols')));\n    this.setupInternalListeners();\n  },\n\n  setupInternalListeners() {\n    forEach.call(events, eventName => {\n      this.socket[`on${eventName}`] = event => {\n        Ember.run(() => {\n          var activeListeners = filter.call(this.listeners, listener => {\n            return listener.url === event.currentTarget.url && listener.type === eventName;\n          });\n\n          // TODO: filter active listeners for contexts that are not destroyed\n          forEach.call(activeListeners, item => {\n            if (item.context) {\n              item.callback.call(item.context, event);\n            }\n            else {\n              item.callback(event);\n            }\n          });\n        });\n      };\n    });\n  },\n\n  /*\n  * A helper method to get access to the readyState of the websocket.\n  */\n  readyState() { return this.socket.readyState; }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-websockets/node_modules/ember-websockets/addon/services/socket-io.js":"import WebSocketService from './websockets';\nimport SocketIOProxy from '../helpers/socketio-proxy';\n\nexport default WebSocketService.extend({\n  isWebSocketOpen(socket) {\n    return socket.io.readyState !== 'closed';\n  },\n\n  createSocket(url, options = {}) {\n    const newSocketIO = io(url, options);\n    newSocketIO.connect();\n    return newSocketIO;\n  },\n\n  createProxy(socket) {\n    return SocketIOProxy.create({ content: this, socket });\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-websockets/node_modules/ember-websockets/addon/services/websockets.js":"import Ember from 'ember';\nimport WebsocketProxy from '../helpers/websocket-proxy';\nimport { normalizeURL, cleanURL } from '../helpers';\n\nconst { Service, get, set } = Ember;\n\nexport default Service.extend({\n  /*\n    A hash of open websocket connections. This\n    allows multiple components to share the same connection.\n\n    {\n      'websocket-url': WebSocket Proxy object\n    }\n  */\n  sockets: Ember.computed(function() {\n    return {};\n  }),\n\n  /*\n    socketFor returns a websocket proxy object. On this object there is a property `socket`\n    which contains the actual websocket object. This websocket object is cached based off of the url meaning\n    multiple requests for the same socket will return the same object.\n  */\n  socketFor(url, protocols = []) {\n    /*\n      Websockets allows either a string or array of strings to be passed as the second argument.\n      Normalize both cases into an array of strings so we can just deal with arrays.\n    */\n    if (typeof protocols === 'string') { protocols = [protocols]; }\n\n    /*\n      Normalize the url as native websockets add a / to the end of the url:\n      http://example.com:8000 becomes: http://example.com:8000/\n\n      Since the url will be used as a key will need to make sure that it does not\n      contain '.' as it will throw ember off\n    */\n    const normalizedUrl = normalizeURL(url);\n    const cleanedUrl = cleanURL(normalizedUrl);\n\n    /*\n\n    */\n    const existingProxy = get(this, `sockets.${cleanedUrl}`);\n\n    if (existingProxy && this.isWebSocketOpen(existingProxy.socket)) {\n      return existingProxy;\n    }\n\n    /*\n      we can get to this place if the websocket has been closed and we are trying to reopen\n      or we are creating a proxy for the first time\n    */\n    const newWebSocket = this.createSocket(normalizedUrl, protocols);\n\n    if (existingProxy) {\n      /*\n        If there is an existing socket in place we simply update the websocket object and not\n        the whole proxy as we dont want to destroy the previous listeners.\n      */\n      set(existingProxy, 'socket', newWebSocket);\n      return existingProxy;\n    }\n\n    const newProxy = this.createProxy(newWebSocket, protocols);\n\n    set(this, `sockets.${cleanedUrl}`, newProxy);\n\n    return newProxy;\n  },\n\n  closeSocketFor(url) {\n    const cleanedUrl = cleanURL(normalizeURL(url));\n    get(this, `sockets.${cleanedUrl}`).socket.close();\n    delete get(this, 'sockets')[cleanedUrl];\n  },\n\n  isWebSocketOpen(websocket) {\n    return websocket.readyState !== WebSocket.CLOSED;\n  },\n\n  createSocket(url, options) {\n    return new WebSocket(url, options);\n  },\n\n  createProxy(socket, protocols) {\n    return WebsocketProxy.create({ content: this, protocols, socket });\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-websockets/node_modules/ember-websockets/app/services/socket-io.js":"export { default } from 'ember-websockets/services/socket-io';\n","/home/travis/build/npmtest/node-npmtest-ember-websockets/node_modules/ember-websockets/app/services/websockets.js":"export { default } from 'ember-websockets/services/websockets';\n"}